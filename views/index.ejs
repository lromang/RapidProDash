<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!--                            Css                                 -->
  <link rel='stylesheet' href='/stylesheets/style.css' />
	<link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css"/>
  <!--                          Scrips                                -->
  <script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script type="text/javascript" src="/js/entidad.js"></script>
  <script type="text/javascript" src="/js/rapidpro_api.js"></script>
</head>
<body>

<div id='map'></div>

<script type="text/javascript">

  //  Dictionary, counter users by state
  var users_state = {}
  for (var i = 1; i < 33; i++) {
    users_state[""+i] = 0;
  }
  $.each(users['results'],function (key,tmp) {
    users_state[tmp['fields']['estado']] +=1;
  });


  // Leaflet map
	var map = L.map('map').setView(new L.LatLng(24.75,-101.5),5);
	L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		maxZoom: 18,
				id: 'mapbox.light'
	}).addTo(map);

	var info = L.control();
	info.onAdd = function (map) {
		this._div = L.DomUtil.create('div', 'info');
		this.update();
		return this._div;
	};
	info.update = function (props) {
    this._div.innerHTML = '<h4>Usuarios por estado</h4>' +  (props ?
      '<b>' + props.nom_ent + '</b><br />' + users_state[props.cve] + ' personas han usado el bot'
      : 'Selecciona el estado que quieres ver');
	};

	info.addTo(map);


	// get color depending on population density value
	function getColor(d) {
		return d > 100 ? '#800026' :
				d > 50  ? '#BD0026' :
				d > 20  ? '#E31A1C' :
				d > 10  ? '#FC4E2A' :
				d > 5   ? '#FD8D3C' :
				d > 2   ? '#FEB24C' :
				d > 1   ? '#FED976' :
				'#FFEDA0';
	}

	function style(feature) {
		return {
			weight: 2,
			opacity: 1,
			color: 'white',
			dashArray: '3',
			fillOpacity: 0.7,
			fillColor: getColor(users_state[feature.properties.cve])
		};
	}

	function highlightFeature(e) {
		var layer = e.target;

		layer.setStyle({
			weight: 5,
			color: '#666',
			dashArray: '',
			fillOpacity: 0.7
		});

		if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
			layer.bringToFront();
		}
		info.update(layer.feature.properties);
	}

	var geojson;

	function resetHighlight(e) {
		geojson.resetStyle(e.target);
		info.update();
	}

	function zoomToFeature(e) {
		map.fitBounds(e.target.getBounds());
	}

	function onEachFeature(feature, layer) {
		layer.on({
			mouseover: highlightFeature,
			mouseout: resetHighlight,
			click: zoomToFeature
		});
	}

	geojson = L.geoJson(entidad, {
		style: style,
		onEachFeature: onEachFeature
	}).addTo(map);



	var legend = L.control({position: 'bottomright'});

	legend.onAdd = function (map) {

		var div = L.DomUtil.create('div', 'info legend'),
			grades = [0, 1, 2, 5, 10, 20, 50, 100],
			labels = [],
			from, to;

		for (var i = 0; i < grades.length; i++) {
			from = grades[i];
			to = grades[i + 1];
			labels.push(
				'<i style="background:' + getColor(from + 1) + '"></i> ' +
				from + (to ? '&ndash;' + to : '+'));
		}

		div.innerHTML = labels.join('<br>');
		return div;
	};

	legend.addTo(map);

</script>
</body>
</html>
